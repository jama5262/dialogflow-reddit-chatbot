{"version":3,"sources":["redux/reducers/chatsReducer.js","redux/reducers/loadingReducer.js","redux/reducers/suggestionsReducer.js","redux/reducers/openChatReducer.js","redux/reducers/addQueryReducer.js","redux/reducers/index.js","utils/constants/actionConstants.js","redux/store.js","redux/actions/index.js","components/UserChatCard.jsx","components/RedditPostCard.jsx","components/BotChatCard.jsx","components/Loading.jsx","components/ChatBot.jsx","utils/constants/baseUrlConstant.js","pages/Home.jsx","serviceWorker.js","index.js","App.jsx"],"names":["initialState","show","open","text","combineReducers","chats","state","action","type","push","id","length","data","loading","suggestions","openChat","query","createStore","reducer","applyMiddleware","thunk","addQueryAction","openChatAction","loadingAction","chatAction","props","animejsClass","useEffect","anime","targets","translateY","Box","className","my","mb","Grid","direction","container","justify","item","style","maxWidth","Card","variant","border","borderRadius","CardContent","padding","p","fontWeight","fullfilment","mt","textDecoration","target","rel","href","url","sm","fontSize","color","subreddit","Typography","noWrap","fontFamily","title","Chip","width","label","size","icon","faRedditAlien","spacing","flexWrap","faRobot","background","redditPosts","map","x","i","key","RedditPostCard","loop","delay","el","l","endDelay","j","dispatch","useDispatch","useSelector","chatDialog","document","getElementById","scrollTop","scrollHeight","handleDetectIntent","getState","axios","baseURL","params","then","response","catch","error","message","Dialog","onClose","scroll","fullWidth","DialogContent","height","overflowX","dividers","bot","BotChatCard","UserChatCard","Loading","px","py","alignItems","xs","mr","TextField","onKeyDown","e","event","onChange","value","autoFocus","Button","onClick","disableElevation","textAlign","faPaperPlane","disptch","minHeight","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","dark","ReactDOM","render","store","Home","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70b0759c.chunk.js","sourcesContent":["import * as types from \"../../utils/constants/actionConstants\"\r\n\r\nconst initialState = [\r\n  {\r\n    \"id\": 1,\r\n    \"bot\": true,\r\n    \"fullfilment\": \"Greetings 😀, reddit chatbot here 👋. You can ask me about top/hot or new post from different subreddits. Like 'show me top 5 funny posts' or 'I would new posts from r/ask subreddit, please'. Try it out now 👇\"\r\n  }\r\n]\r\n\r\nexport const chats = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.CHAT:\r\n      state = [...state]\r\n      state.push({\r\n        id: state.length + 1,\r\n        ...action.data\r\n      })\r\n      break\r\n    default:\r\n      break\r\n  }\r\n  return state\r\n}","import * as types from \"../../utils/constants/actionConstants\"\r\n\r\nconst initialState = {\r\n  show: false\r\n}\r\n\r\nexport const loading = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.LOADING:\r\n      state = { ...state, show: action.show }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state\r\n}","import * as types from \"../../utils/constants/actionConstants\"\r\n\r\nconst initialState = []\r\n\r\nexport const suggestions = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SUGGESTIONS:\r\n      state = [ ...state ]\r\n      // state.push({\r\n      //   id: state.length + 1,\r\n      //   text: action.text\r\n      // })\r\n      break\r\n    default:\r\n      break\r\n  }\r\n  return state\r\n}","import * as types from \"../../utils/constants/actionConstants\"\r\n\r\nconst initialState = {\r\n  open: false\r\n}\r\n\r\nexport const openChat = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.OPEN_CHAT:\r\n      state = { ...state, open: action.open }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state\r\n}","import * as types from \"../../utils/constants/actionConstants\"\r\n\r\nconst initialState = {\r\n  text: \"\"\r\n}\r\n\r\nexport const addQuery = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_QUERY:\r\n      state = { ...state, text: action.text }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state\r\n}","import { combineReducers } from \"redux\";\r\n\r\nimport { chats } from \"./chatsReducer\"\r\nimport { loading } from \"./loadingReducer\"\r\nimport { suggestions } from \"./suggestionsReducer\"\r\nimport { openChat } from \"./openChatReducer\"\r\nimport { addQuery as query } from \"./addQueryReducer\"\r\n\r\nexport default combineReducers({\r\n  chats,\r\n  loading,\r\n  suggestions,\r\n  openChat,\r\n  query\r\n});","  \r\nexport const CHAT = 'CHAT'\r\nexport const ADD_QUERY = 'ADD_QUERY'\r\nexport const SUGGESTIONS = 'SUGGESTIONS'\r\nexport const OPEN_CHAT = 'OPENCHAT'\r\nexport const LOADING = 'LOADING'","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport reducer from \"./reducers\";\r\n\r\nexport default createStore(reducer, applyMiddleware(thunk));","import axios from \"axios\"\r\n\r\nimport { BASE_URL } from \"../../utils/constants/baseUrlConstant\"\r\nimport * as types from \"../../utils/constants/actionConstants\"\r\n\r\nexport const addQueryAction = text => ({ type: types.ADD_QUERY, text })\r\nexport const openChatAction = open => ({ type: types.OPEN_CHAT, open })\r\nexport const loadingAction = show => ({ type: types.LOADING, show })\r\nexport const chatAction = data => ({ type: types.CHAT, data })\r\nexport const detectIntent = () => {\r\n  return (dispatch, getState) => {\r\n    const { query } = getState()\r\n\r\n    if (!query.text.length) {\r\n      dispatch(chatAction({\r\n        \"bot\": true,\r\n        \"fullfilment\": \"You didn't ask me anything 😐\"\r\n      }))\r\n      return\r\n    }\r\n\r\n    dispatch(chatAction({\r\n      \"bot\": false,\r\n      \"fullfilment\": query.text\r\n    }))\r\n    dispatch(loadingAction(true))\r\n    dispatch(addQueryAction(\"\"))\r\n\r\n    axios({\r\n      baseURL: BASE_URL,\r\n      url: '/chatbot',\r\n      params: {\r\n        query: query.text\r\n      }\r\n    })\r\n      .then((response) => {\r\n        dispatch(chatAction(response.data.data))\r\n      })\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          dispatch(chatAction({\r\n            \"bot\": true,\r\n            \"fullfilment\": error.response.data.error.fullfilment\r\n          }))\r\n        } else {\r\n          dispatch(chatAction({\r\n            \"bot\": true,\r\n            \"fullfilment\": error.message + \" 💀\"\r\n          }))\r\n        }\r\n      })\r\n      .then(() => {\r\n        dispatch(loadingAction(false))\r\n      })\r\n  }\r\n}","import React, { useEffect } from 'react'\r\nimport anime from 'animejs/lib/anime.es.js';\r\n\r\nimport { Grid, Card, Box, CardContent } from '@material-ui/core';\r\n\r\nexport default (props) => {\r\n\r\n  let animejsClass = `bot${props.data.id}`\r\n\r\n  useEffect(() => {\r\n    anime({\r\n      targets: `.${animejsClass}`,\r\n      translateY: [30, 0],\r\n    });\r\n  }, [animejsClass])\r\n\r\n  return (\r\n    <Box className={animejsClass} my={3} mb={1}>\r\n      <Grid direction=\"row\" container justify=\"flex-end\">\r\n        <Grid item style={{ maxWidth: \"75%\" }}>\r\n          <Card variant=\"outlined\" style={{ border: \"2px solid #FF4500\", borderRadius: \"15px\" }}>\r\n            <CardContent style={{ padding: \"0\" }}>\r\n              <Box p={1} fontWeight=\"fontWeightBold\">{props.data.fullfilment}</Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Grid, Card, Box, CardContent, Chip, Typography } from '@material-ui/core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faRedditAlien } from '@fortawesome/free-brands-svg-icons'\r\n\r\nexport default (props) => {\r\n  return (\r\n    <Box mt={1}>\r\n      <a style={{textDecoration: \"none\"}} target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.reddit.com${props.data.url}`}>\r\n        <Card variant=\"outlined\" style={{ border: \"2px solid #FF4500\", borderRadius: \"15px\" }}>\r\n          <CardContent style={{ padding: \"6px 10px\" }}>\r\n            <Grid container direction=\"column\">\r\n              <Grid item sm>\r\n                <Box fontWeight=\"fontWeightBold\" fontSize=\"overline.fontSize\" style={{ color: \"#FF4500\" }}>{props.data.subreddit}</Box>\r\n              </Grid>\r\n              <Grid item sm>\r\n                <Typography noWrap style={{ fontFamily: \"'Quicksand', sans-serif\", fontWeight: \"700\" }}>{props.data.title}</Typography>\r\n              </Grid>\r\n              <Grid item sm>\r\n                <Box mt={1} fontWeight=\"fontWeightBold\"><Chip style={{ width: \"100%\" }} label={props.data.url} color=\"primary\" size=\"small\" icon={<FontAwesomeIcon icon={faRedditAlien} color=\"#FFF\" />} /></Box>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </a>\r\n    </Box>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport anime from 'animejs/lib/anime.es.js';\r\n\r\nimport { Grid, Card, Box, CardContent } from '@material-ui/core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faRobot } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport RedditPostCard from \"./RedditPostCard\"\r\n\r\nconst redditPosts = (redditPosts) => {\r\n  if (redditPosts && redditPosts.length) {\r\n    return (\r\n      <Grid spacing={2} container direction=\"row\" style={{ flexWrap: \"nowrap\" }}>\r\n        <Grid item> <FontAwesomeIcon icon={faRobot} size=\"2x\" color=\"#FFF\" /></Grid>\r\n        <Grid container direction=\"column\" style={{ maxWidth: \"72.5%\" }}>\r\n          {\r\n            redditPosts.map((x, i) => {\r\n              return (\r\n                <Grid key={i} item style={{ width: \"100%\" }}>\r\n                  <RedditPostCard data={x} />\r\n                </Grid>\r\n              );\r\n            })\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default (props) => {\r\n\r\n  let animejsClass = `bot${props.data.id}`\r\n\r\n  useEffect(() => {\r\n    anime({\r\n      targets: `.${animejsClass}`,\r\n      translateY: [30, 0],\r\n    });\r\n  }, [animejsClass])\r\n\r\n  return (\r\n    <Box className={animejsClass} my={2}>\r\n      <Grid direction=\"row\" spacing={1} container justify=\"flex-start\" style={{ flexWrap: \"nowrap\" }}>\r\n        <Grid item> <FontAwesomeIcon icon={faRobot} size=\"2x\" color=\"#FF4500\" /></Grid>\r\n        <Grid item style={{ maxWidth: \"75%\" }}>\r\n          <Card variant=\"outlined\" style={{ border: \"2px solid #FF4500\", background: \"#FF4500\", borderRadius: \"15px\" }}>\r\n            <CardContent style={{ padding: \"0\" }}>\r\n              <Box p={1} fontWeight=\"fontWeightBold\" style={{ color: \"white\" }}>{props.data.fullfilment}</Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n      {redditPosts(props.data.redditPosts)}\r\n    </Box>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport anime from 'animejs/lib/anime.es.js';\r\n\r\nimport { Box, Grid, Chip } from '@material-ui/core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faRobot } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default () => {\r\n\r\n  useEffect(() => {\r\n    anime({\r\n      targets: '.loadingElement',\r\n      translateY: [-3, 3, 0],\r\n      direction: 'alternate',\r\n      loop: true,\r\n      delay: function (el, i, l) {\r\n        return i * 100;\r\n      },\r\n      endDelay: function (el, i, l) {\r\n        return (l - i) * 100;\r\n      }\r\n    });\r\n    anime({\r\n      targets: `.loading`,\r\n      translateY: [30, 0],\r\n    });\r\n  })\r\n\r\n  const j = (\r\n    <Grid container direction=\"row\" style={{ padding: \"4px 0\" }}>\r\n      <div className=\"loadingElement\"></div>\r\n      <div className=\"loadingElement\"></div>\r\n      <div className=\"loadingElement\"></div>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <Box className=\"loading\" my={2}>\r\n      <Grid direction=\"row\" spacing={1} container justify=\"flex-start\" style={{ flexWrap: \"nowrap\" }}>\r\n        <Grid item> <FontAwesomeIcon icon={faRobot} size=\"2x\" color=\"#FF4500\" /></Grid>\r\n        <Grid item>\r\n          <Chip label={j} color=\"primary\" />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { openChatAction, detectIntent, addQueryAction } from \"../redux/actions\";\r\n\r\nimport { Grid, Dialog, DialogContent, Button, TextField, Box } from '@material-ui/core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport UserChatCard from \"./UserChatCard\"\r\nimport BotChatCard from \"./BotChatCard\"\r\nimport Loading from \"./Loading\"\r\n\r\nexport default () => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const openChat = useSelector(state => state.openChat.open)\r\n  const query = useSelector((state) => state.query.text)\r\n  const chats = useSelector(state => state.chats)\r\n  const loading = useSelector(state => state.loading.show)\r\n\r\n  useEffect(() => {\r\n    let chatDialog = document.getElementById(\"chatDialog\")\r\n    if(chatDialog) {\r\n      chatDialog.scrollTop = chatDialog.scrollHeight\r\n    }\r\n  })\r\n\r\n  const handleCloseChat = () => {\r\n    dispatch(openChatAction(false))\r\n  }\r\n\r\n  const handleAddQuery = (value) => {\r\n    dispatch(addQueryAction(value))\r\n  }\r\n\r\n  const handleDetectIntent = () => {\r\n    dispatch(detectIntent())\r\n  }\r\n\r\n  const handleOnEnterPressed = (event) => {\r\n    if (event && event.key === \"Enter\") {\r\n      handleDetectIntent()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        onClose={handleCloseChat}\r\n        open={openChat}\r\n        scroll=\"paper\"\r\n        maxWidth=\"sm\"\r\n        fullWidth={true}\r\n      >\r\n        <DialogContent id=\"chatDialog\" style={{ height: \"650px\", overflowX: \"hidden\" }} dividers={true}>\r\n          {\r\n            chats.map((x, i) => {\r\n              if (x.bot) {\r\n                return (<BotChatCard className=\"chat\" key={i} data={x} />)\r\n              }\r\n              return (<UserChatCard className=\"chat\" key={i} data={x} />)\r\n            })\r\n          }\r\n          {loading ? (<Loading />) : null}\r\n        </DialogContent>\r\n        <Box px={3} py={2}>\r\n          <Grid container direction=\"row\" alignItems=\"center\">\r\n            <Grid item xs>\r\n              <Box mr={1}><TextField onKeyDown={(e) => handleOnEnterPressed(e)} onChange={(e) => handleAddQuery(e.target.value)} value={query} autoFocus id=\"outlined-basic\" fullWidth variant=\"outlined\" size=\"small\" /></Box>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button onClick={handleDetectIntent} style={{ borderRadius: \"10px\" }} variant=\"contained\" color=\"primary\" disableElevation>\r\n                <Box fontWeight=\"fontWeightBold\" textAlign=\"left\">\r\n                  <FontAwesomeIcon icon={faPaperPlane} size=\"lg\" />\r\n                </Box>\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","export const BASE_URL = \"https://dialogflow-reddit-chatbot.herokuapp.com\"","import React from 'react'\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { openChatAction } from \"../redux/actions\";\r\n\r\nimport { Grid, Box, Button } from '@material-ui/core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faRobot } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Chat from \"../components/ChatBot\"\r\n\r\nexport default () => {\r\n\r\n  const disptch = useDispatch()\r\n\r\n  const handleOpenChat = () => {\r\n    disptch(openChatAction(true))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" style={{ minHeight: '100vh' }}>\r\n        <Grid xs={6} item><Box className=\"elementColor\" mb={8} fontSize=\"h1.fontSize\" textAlign=\"center\" fontWeight=\"fontWeightBold\">Dialogflow Reddit Chatbot</Box></Grid>\r\n        <Grid xs={4} item><Box mb={8} fontSize=\"h5.fontSize\" textAlign=\"center\" fontWeight=\"fontWeightBold\">A dailogflow chatbot that consumes the reddit api using a flask server-side and react client-side</Box></Grid>\r\n        <Grid xs={8} item>\r\n          <Button style={{borderRadius: \"10px\"}} onClick={handleOpenChat} variant=\"contained\" color=\"primary\" disableElevation>\r\n            <Box fontWeight=\"fontWeightBold\">\r\n              <FontAwesomeIcon icon={ faRobot } /> Start\r\n            </Box>\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Chat/>\r\n    </div>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport store from \"./redux/store\"\r\nimport App from \"./App.jsx\";\r\nimport \"./styles/index.css\"\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#FF4500\",\r\n      dark: \"#FF4500\",\r\n    }\r\n  }\r\n})\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <MuiThemeProvider theme={theme}>\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport Home from \"./pages/Home\"\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <Home/>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}